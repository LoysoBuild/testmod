package com.test_project.combat.stance;

public enum StanceType {
    ATTACK,
    DEFENSE
}

package com.test_project.combat.stance;

import com.test_project.combat.combo.CombatEventHandler;
import com.test_project.combat.PlayerCombatSettings;
import net.minecraft.network.FriendlyByteBuf;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.network.protocol.common.custom.CustomPacketPayload;
import net.minecraft.network.codec.StreamCodec;
import net.neoforged.neoforge.network.handling.IPayloadContext;
import net.minecraft.world.entity.player.Player;
import net.minecraft.server.level.ServerPlayer;
import net.minecraft.world.effect.MobEffectInstance;
import net.minecraft.world.effect.MobEffects;
import net.minecraft.network.chat.Component;

public record C2SToggleStancePacket() implements CustomPacketPayload {
    public static final Type<C2SToggleStancePacket> TYPE =
            new Type<>(ResourceLocation.fromNamespaceAndPath("mainmod", "toggle_stance"));
    public static final StreamCodec<FriendlyByteBuf, C2SToggleStancePacket> STREAM_CODEC =
            StreamCodec.unit(new C2SToggleStancePacket());

    @Override
    public Type<C2SToggleStancePacket> type() {
        return TYPE;
    }

    public static void handle(final C2SToggleStancePacket pkt, final IPayloadContext ctx) {
        ctx.enqueueWork(() -> {
            Player player = ctx.player();
            if (player instanceof ServerPlayer serverPlayer) {
                PlayerCombatSettings settings = CombatEventHandler.getSettings(serverPlayer);
                if (settings.isStanceCooldown()) {
                    serverPlayer.sendSystemMessage(Component.literal("Стойку можно сменить только после кулдауна!"));
                    return;
                }
                StanceType next = settings.getCurrentStance() == StanceType.ATTACK
                        ? StanceType.DEFENSE
                        : StanceType.ATTACK;
                settings.setCurrentStance(next);
                settings.setStanceCooldown(40);
                serverPlayer.addEffect(new MobEffectInstance(MobEffects.MOVEMENT_SLOWDOWN, 40, 1));
                serverPlayer.sendSystemMessage(
                        Component.literal("Стойка переключена: " + (next == StanceType.ATTACK ? "Атака" : "Защита"))
                );
                // Отправляем клиентский пакет для проигрывания анимации
                NetworkManager.sendToPlayer(new S2CPlayStanceAnimationPacket(next), serverPlayer);
            }
        });
    }
}

package com.test_project.combat.stance;

import com.test_project.combat.stance.NetworkManager;
import net.neoforged.bus.api.SubscribeEvent;
import net.neoforged.fml.common.EventBusSubscriber;
import net.neoforged.neoforge.network.event.RegisterPayloadHandlersEvent;

@EventBusSubscriber(bus = EventBusSubscriber.Bus.MOD)
public class ModEvents {
    @SubscribeEvent
    public static void onRegisterPayloadHandlers(RegisterPayloadHandlersEvent event) {
        NetworkManager.registerPackets(event);
    }
}

package com.test_project.combat.stance;

import net.minecraft.server.level.ServerPlayer;
import net.neoforged.neoforge.network.event.RegisterPayloadHandlersEvent;
import net.neoforged.neoforge.network.registration.PayloadRegistrar;

public class NetworkManager {
    public static void registerPackets(final RegisterPayloadHandlersEvent event) {
        PayloadRegistrar registrar = event.registrar("mainmod");
        registrar.playToClient(
                S2CPlayStanceAnimationPacket.TYPE,
                S2CPlayStanceAnimationPacket.STREAM_CODEC,
                S2CPlayStanceAnimationPacket::handle
        );
    }

    public static void sendToPlayer(S2CPlayStanceAnimationPacket packet, ServerPlayer player) {
        player.connection.send(packet);
    }
}

package com.test_project.combat.stance;

import net.minecraft.network.FriendlyByteBuf;
import net.minecraft.network.protocol.common.custom.CustomPacketPayload;
import net.minecraft.network.codec.StreamCodec;
import net.minecraft.resources.ResourceLocation;
import net.neoforged.neoforge.network.handling.IPayloadContext;

public record S2CPlayStanceAnimationPacket(StanceType stance) implements CustomPacketPayload {
    public static final Type<S2CPlayStanceAnimationPacket> TYPE =
            new Type<>(ResourceLocation.fromNamespaceAndPath("mainmod", "play_stance_animation"));
    public static final StreamCodec<FriendlyByteBuf, S2CPlayStanceAnimationPacket> STREAM_CODEC =
            StreamCodec.of(
                    (buf, packet) -> buf.writeEnum(packet.stance()),
                    buf -> new S2CPlayStanceAnimationPacket(buf.readEnum(StanceType.class))
            );

    @Override
    public Type<S2CPlayStanceAnimationPacket> type() {
        return TYPE;
    }

    public static void handle(final S2CPlayStanceAnimationPacket pkt, final IPayloadContext ctx) {
        ctx.enqueueWork(() -> {
            // ctx.player() всегда клиентский игрок
            StanceAnimationManager.playStance(ctx.player(), pkt.stance());
        });
    }
}

package com.test_project.combat.stance;

import com.zigythebird.playeranimatorapi.data.PlayerAnimationData;
import com.zigythebird.playeranimatorapi.data.PlayerParts;
import com.zigythebird.playeranimatorapi.playeranims.PlayerAnimations;
import net.minecraft.client.player.AbstractClientPlayer;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.world.entity.player.Player;

public class StanceAnimationManager {
    public static void playStance(Player player, StanceType stance) {
        if (player instanceof AbstractClientPlayer clientPlayer) {
            ResourceLocation animId = switch (stance) {
                case ATTACK -> ResourceLocation.fromNamespaceAndPath("mainmod", "sword_attack_idle");
                case DEFENSE -> ResourceLocation.fromNamespaceAndPath("mainmod", "sword_defense_idle");
            };
            PlayerAnimationData data = new PlayerAnimationData(
                    player.getUUID(),
                    animId,
                    PlayerParts.allEnabled,
                    null,
                    0,
                    0,
                    0,
                    0
            );
            PlayerAnimations.playAnimation(clientPlayer, data);
        }
    }
}