package com.test_project.combat.stance;

import com.test_project.combat.combo.CombatEventHandler;
import com.test_project.combat.PlayerCombatSettings;
import net.minecraft.network.FriendlyByteBuf;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.network.protocol.common.custom.CustomPacketPayload;
import net.minecraft.network.codec.StreamCodec;
import net.neoforged.neoforge.network.handling.IPayloadContext;
import net.minecraft.world.entity.player.Player;
import net.minecraft.server.level.ServerPlayer;
import net.minecraft.world.effect.MobEffectInstance;
import net.minecraft.world.effect.MobEffects;
import net.minecraft.network.chat.Component;
import net.minecraft.world.item.ItemStack;

public record C2SToggleStancePacket() implements CustomPacketPayload {

    public static final Type<C2SToggleStancePacket> TYPE =
            new Type<>(ResourceLocation.fromNamespaceAndPath("mainmod", "toggle_stance"));

    public static final StreamCodec<FriendlyByteBuf, C2SToggleStancePacket> STREAM_CODEC =
            StreamCodec.unit(new C2SToggleStancePacket());

    @Override
    public Type<C2SToggleStancePacket> type() {
        return TYPE;
    }

    public static void handle(final C2SToggleStancePacket pkt, final IPayloadContext ctx) {
        ctx.enqueueWork(() -> {
            Player player = ctx.player();
            if (!(player instanceof ServerPlayer serverPlayer)) return;

            PlayerCombatSettings settings = CombatEventHandler.getSettings(serverPlayer);

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞
            if (settings.isStanceCooldown()) {
                serverPlayer.sendSystemMessage(Component.literal("¬ßc‚è∞ –°—Ç–æ–π–∫—É –º–æ–∂–Ω–æ —Å–º–µ–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∫—É–ª–¥–∞—É–Ω–∞!"));
                return;
            }

            // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–æ–π–∫–∏
            StanceType next = settings.getCurrentStance() == StanceType.ATTACK
                    ? StanceType.DEFENSE
                    : StanceType.ATTACK;

            settings.setCurrentStance(next);
            settings.setStanceCooldown(40); // 2 —Å–µ–∫—É–Ω–¥—ã

            // –≠—Ñ—Ñ–µ–∫—Ç—ã –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
            serverPlayer.addEffect(new MobEffectInstance(MobEffects.MOVEMENT_SLOWDOWN, 40, 1));

            // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫—É
            String stanceName = next == StanceType.ATTACK ? "¬ßc‚öî –ê—Ç–∞–∫–∞" : "¬ß9üõ° –ó–∞—â–∏—Ç–∞";
            serverPlayer.sendSystemMessage(Component.literal("¬ße‚ú® –°—Ç–æ–π–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∞: " + stanceName));

            // –°–º–µ–Ω–∞ –ø—Ä–µ—Å–µ—Ç–∞ –æ—Ä—É–∂–∏—è
            ItemStack stack = serverPlayer.getMainHandItem();
            if (!stack.isEmpty() && WeaponPresetHelper.isWeaponSupported(stack)) {
                WeaponPresetHelper.setPresetForItem(stack, next, serverPlayer);
            }

            // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∞–∫–µ—Ç–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ –Ω–∞ –∫–ª–∏–µ–Ω—Ç
            try {
                NetworkManager.sendToPlayer(new S2CPlayStanceAnimationPacket(next), serverPlayer);
            } catch (Exception e) {
                System.err.println("Failed to send stance animation packet: " + e.getMessage());
            }
        });
    }
}
