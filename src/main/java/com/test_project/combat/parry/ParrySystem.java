package com.test_project.combat.parry;

import net.minecraft.world.entity.player.Player;
import net.minecraft.server.level.ServerPlayer;
import net.minecraft.world.effect.MobEffectInstance;
import net.minecraft.world.effect.MobEffects;
import net.minecraft.network.chat.Component;
import net.minecraft.world.item.ItemStack;
import net.minecraft.world.InteractionHand;
import net.minecraft.core.particles.ParticleTypes;
import net.minecraft.sounds.SoundEvents;
import net.minecraft.sounds.SoundSource;
import net.minecraft.world.damagesource.DamageSource;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

public class ParrySystem {

    // –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–∞—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    private static final Map<UUID, ParryState> PARRY_STATES = new HashMap<>();

    // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –ø–∞—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
    private static final int PARRY_WINDOW_TICKS = 10; // 0.5 —Å–µ–∫—É–Ω–¥—ã (10 —Ç–∏–∫–æ–≤)
    private static final int COUNTER_WINDOW_TICKS = 20; // 1 —Å–µ–∫—É–Ω–¥–∞ –¥–ª—è –∫–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∏
    private static final int PARRY_COOLDOWN_TICKS = 40; // 2 —Å–µ–∫—É–Ω–¥—ã –∫—É–ª–¥–∞—É–Ω–∞
    private static final float COUNTER_DAMAGE_MULTIPLIER = 1.3f; // +30% —É—Ä–æ–Ω–∞

    public static class ParryState {
        public boolean isParrying = false;
        public int parryStartTick = 0;
        public int lastSuccessfulParryTick = 0;
        public int parryCooldownTick = 0;
        public boolean canCounterAttack = false;
        public int counterWindowEndTick = 0;
    }

    /**
     * –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–∞—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –∏–≥—Ä–æ–∫–æ–º
     */
    public static void activateParry(ServerPlayer player) {
        UUID playerId = player.getUUID();
        ParryState state = PARRY_STATES.computeIfAbsent(playerId, k -> new ParryState());

        int currentTick = player.tickCount;

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞
        if (currentTick < state.parryCooldownTick) {
            int remainingCooldown = (state.parryCooldownTick - currentTick) / 20;
            player.sendSystemMessage(Component.literal(
                    "¬ßc‚è∞ –ü–∞—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –∫—É–ª–¥–∞—É–Ω–µ! –û—Å—Ç–∞–ª–æ—Å—å: " + remainingCooldown + " —Å–µ–∫"
            ));
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –æ—Ä—É–∂–∏—è
        ItemStack mainHand = player.getMainHandItem();
        if (!canParryWithItem(mainHand)) {
            player.sendSystemMessage(Component.literal(
                    "¬ßc‚ùå –ù–µ–ª—å–∑—è –ø–∞—Ä–∏—Ä–æ–≤–∞—Ç—å —Å —ç—Ç–∏–º –ø—Ä–µ–¥–º–µ—Ç–æ–º!"
            ));
            return;
        }

        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–∞—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
        state.isParrying = true;
        state.parryStartTick = currentTick;
        state.parryCooldownTick = currentTick + PARRY_COOLDOWN_TICKS;

        // –í–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–∞—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
        spawnParryActivationEffects(player);

        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫—É
        player.sendSystemMessage(Component.literal("¬ßeüõ° –ü–∞—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ!"));

        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–∞—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
        player.swing(InteractionHand.MAIN_HAND);

        System.out.println("[PARRY] Player " + player.getName().getString() + " activated parry");
    }

    /**
     * –ü–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ö–æ–¥—è—â–µ–π –∞—Ç–∞–∫–∏
     */
    public static boolean attemptParry(ServerPlayer defender, Player attacker, float incomingDamage) {
        UUID defenderId = defender.getUUID();
        ParryState state = PARRY_STATES.get(defenderId);

        if (state == null || !state.isParrying) {
            return false; // –ü–∞—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ
        }

        int currentTick = defender.tickCount;
        int timeSinceParryStart = currentTick - state.parryStartTick;

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–∞—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
        if (timeSinceParryStart > PARRY_WINDOW_TICKS) {
            state.isParrying = false; // –û–∫–Ω–æ –ø–∞—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫—Ä—ã–ª–æ—Å—å
            return false;
        }

        // –£—Å–ø–µ—à–Ω–æ–µ –ø–∞—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ!
        state.isParrying = false;
        state.lastSuccessfulParryTick = currentTick;
        state.canCounterAttack = true;
        state.counterWindowEndTick = currentTick + COUNTER_WINDOW_TICKS;

        // –≠—Ñ—Ñ–µ–∫—Ç—ã —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–∞—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
        executeSuccessfulParry(defender, attacker, incomingDamage);

        return true; // –ê—Ç–∞–∫–∞ –ø–∞—Ä–∏—Ä–æ–≤–∞–Ω–∞
    }

    /**
     * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–∞—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    private static void executeSuccessfulParry(ServerPlayer defender, Player attacker, float damage) {
        // –í–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
        spawnParrySuccessEffects(defender, attacker);

        // –ó–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
        defender.level().playSound(null, defender.blockPosition(),
                SoundEvents.SHIELD_BLOCK, SoundSource.PLAYERS, 1.0f, 1.2f);

        // –ö—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è –∑–∞—â–∏—Ç–Ω–∏–∫—É
        defender.addEffect(new MobEffectInstance(MobEffects.DAMAGE_RESISTANCE, 20, 0)); // 1 —Å–µ–∫

        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        defender.sendSystemMessage(Component.literal(
                "¬ßa‚ö° –ü–∞—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! ¬ßf–û—Ç–∫—Ä—ã—Ç–æ –æ–∫–Ω–æ –∫–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∏!"
        ));

        if (attacker instanceof ServerPlayer serverAttacker) {
            serverAttacker.sendSystemMessage(Component.literal(
                    "¬ßcüõ° –í–∞—à–∞ –∞—Ç–∞–∫–∞ –±—ã–ª–∞ –ø–∞—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∏–≥—Ä–æ–∫–æ–º " + defender.getName().getString()
            ));
        }

        System.out.println("[PARRY] Successful parry: " + defender.getName().getString() +
                " vs " + attacker.getName().getString());
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∏
     */
    public static boolean attemptCounterAttack(ServerPlayer attacker, Player target) {
        UUID attackerId = attacker.getUUID();
        ParryState state = PARRY_STATES.get(attackerId);

        if (state == null || !state.canCounterAttack) {
            return false; // –ö–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
        }

        int currentTick = attacker.tickCount;

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–∫–Ω–∞ –∫–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∏
        if (currentTick > state.counterWindowEndTick) {
            state.canCounterAttack = false; // –û–∫–Ω–æ –∫–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∏ –∑–∞–∫—Ä—ã–ª–æ—Å—å
            return false;
        }

        // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–Ω—Ç—Ä–∞—Ç–∞–∫—É
        state.canCounterAttack = false; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ç—Ä–∞—Ç–∞–∫—É

        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–Ω—Ç—Ä–∞—Ç–∞–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä
        attacker.getServer().execute(() -> executeCounterAttack(attacker, target));

        return true; // –ö–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
    }

    /**
     * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∏
     */
    private static void executeCounterAttack(ServerPlayer attacker, Player target) {
        // –ë–æ–Ω—É—Å–Ω—ã–π —É—Ä–æ–Ω
        ItemStack weapon = attacker.getMainHandItem();
        float baseDamage = getWeaponDamage(weapon);
        float counterDamage = baseDamage * COUNTER_DAMAGE_MULTIPLIER;

        // –°–æ–∑–¥–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ —É—Ä–æ–Ω–∞
        DamageSource damageSource = attacker.damageSources().playerAttack(attacker);
        target.hurt(damageSource, counterDamage);

        // –≠—Ñ—Ñ–µ–∫—Ç—ã –∫–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∏
        spawnCounterAttackEffects(attacker, target);

        // –ó–≤—É–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞—Ä–∞
        attacker.level().playSound(null, attacker.blockPosition(),
                SoundEvents.PLAYER_ATTACK_CRIT, SoundSource.PLAYERS, 1.0f, 0.8f);

        // –ê–Ω–∏–º–∞—Ü–∏—è —É–¥–∞—Ä–∞
        attacker.swing(InteractionHand.MAIN_HAND);

        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        attacker.sendSystemMessage(Component.literal(
                "¬ß6‚ö° –ö–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∞! ¬ßf–ù–∞–Ω–µ—Å–µ–Ω–æ ¬ßc" + String.format("%.1f", counterDamage) + " ¬ßf—É—Ä–æ–Ω–∞"
        ));

        if (target instanceof ServerPlayer serverTarget) {
            serverTarget.sendSystemMessage(Component.literal(
                    "¬ßcüí• –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∞ –æ—Ç " + attacker.getName().getString() +
                            " ¬ßc(-" + String.format("%.1f", counterDamage) + " HP)"
            ));
        }

        System.out.println("[COUNTER] Counter attack: " + attacker.getName().getString() +
                " -> " + target.getName().getString() + " (" + counterDamage + " dmg)");
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–Ω–æ –ª–∏ –ø–∞—Ä–∏—Ä–æ–≤–∞—Ç—å —Å –¥–∞–Ω–Ω—ã–º –ø—Ä–µ–¥–º–µ—Ç–æ–º
     */
    private static boolean canParryWithItem(ItemStack stack) {
        if (stack.isEmpty()) return false;

        // –ú–æ–∂–Ω–æ –ø–∞—Ä–∏—Ä–æ–≤–∞—Ç—å –º–µ—á–∞–º–∏, —Ç–æ–ø–æ—Ä–∞–º–∏ –∏ —â–∏—Ç–∞–º–∏
        String itemName = stack.getItem().toString().toLowerCase();
        return itemName.contains("sword") ||
                itemName.contains("axe") ||
                itemName.contains("shield") ||
                stack.getItem() instanceof net.minecraft.world.item.SwordItem ||
                stack.getItem() instanceof net.minecraft.world.item.AxeItem ||
                stack.getItem() instanceof net.minecraft.world.item.ShieldItem;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–Ω–∞ –æ—Ä—É–∂–∏—è
     */
    private static float getWeaponDamage(ItemStack weapon) {
        if (weapon.isEmpty()) return 1.0f;

        // –ë–∞–∑–æ–≤—ã–π —É—Ä–æ–Ω –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—Ä—É–∂–∏—è
        if (weapon.getItem() instanceof net.minecraft.world.item.SwordItem sword) {
            return sword.getDamage() + 1.0f; // +1 –∑–∞ –±–∞–∑–æ–≤—ã–π —É—Ä–æ–Ω —Ä—É–∫–∏
        } else if (weapon.getItem() instanceof net.minecraft.world.item.AxeItem axe) {
            return axe.getAttackDamage() + 1.0f;
        }

        return 2.0f; // –£—Ä–æ–Ω —Ä—É–∫–∏
    }

    /**
     * –í–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–∞—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    private static void spawnParryActivationEffects(ServerPlayer player) {
        // –°–∏–Ω–∏–µ —á–∞—Å—Ç–∏—Ü—ã –≤–æ–∫—Ä—É–≥ –∏–≥—Ä–æ–∫–∞
        for (int i = 0; i < 8; i++) {
            double angle = (i * Math.PI * 2) / 8;
            double x = player.getX() + Math.cos(angle) * 1.5;
            double z = player.getZ() + Math.sin(angle) * 1.5;
            double y = player.getY() + 1.0;

            player.serverLevel().sendParticles(ParticleTypes.ENCHANTED_HIT,
                    x, y, z, 1, 0, 0, 0, 0);
        }
    }

    /**
     * –í–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–∞—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    private static void spawnParrySuccessEffects(ServerPlayer defender, Player attacker) {
        // –ó–æ–ª–æ—Ç—ã–µ –∏—Å–∫—Ä—ã –º–µ–∂–¥—É –∏–≥—Ä–æ–∫–∞–º–∏
        double midX = (defender.getX() + attacker.getX()) / 2;
        double midY = (defender.getY() + attacker.getY()) / 2 + 1;
        double midZ = (defender.getZ() + attacker.getZ()) / 2;

        for (int i = 0; i < 15; i++) {
            defender.serverLevel().sendParticles(ParticleTypes.CRIT,
                    midX, midY, midZ, 1,
                    (Math.random() - 0.5) * 2,
                    (Math.random() - 0.5) * 2,
                    (Math.random() - 0.5) * 2, 0.1);
        }

        // –ë–µ–ª—ã–µ —á–∞—Å—Ç–∏—Ü—ã –≤–æ–∫—Ä—É–≥ –∑–∞—â–∏—Ç–Ω–∏–∫–∞
        for (int i = 0; i < 10; i++) {
            defender.serverLevel().sendParticles(ParticleTypes.CLOUD,
                    defender.getX(), defender.getY() + 1, defender.getZ(), 1,
                    (Math.random() - 0.5) * 1.5,
                    Math.random() * 1.5,
                    (Math.random() - 0.5) * 1.5, 0.05);
        }
    }

    /**
     * –í–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –∫–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∏
     */
    private static void spawnCounterAttackEffects(ServerPlayer attacker, Player target) {
        // –ö—Ä–∞—Å–Ω—ã–µ —á–∞—Å—Ç–∏—Ü—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞—Ä–∞
        for (int i = 0; i < 12; i++) {
            attacker.serverLevel().sendParticles(ParticleTypes.DAMAGE_INDICATOR,
                    target.getX(), target.getY() + 1, target.getZ(), 1,
                    (Math.random() - 0.5) * 1,
                    Math.random() * 1,
                    (Math.random() - 0.5) * 1, 0.1);
        }

        // –õ–∏–Ω–∏—è —á–∞—Å—Ç–∏—Ü –æ—Ç –∞—Ç–∞–∫—É—é—â–µ–≥–æ –∫ —Ü–µ–ª–∏
        double dx = target.getX() - attacker.getX();
        double dy = target.getY() - attacker.getY();
        double dz = target.getZ() - attacker.getZ();

        for (int i = 0; i < 8; i++) {
            double progress = i / 8.0;
            double x = attacker.getX() + dx * progress;
            double y = attacker.getY() + 1 + dy * progress;
            double z = attacker.getZ() + dz * progress;

            attacker.serverLevel().sendParticles(ParticleTypes.SWEEP_ATTACK,
                    x, y, z, 1, 0, 0, 0, 0);
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä–æ–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
     */
    public static void clearPlayerState(UUID playerId) {
        PARRY_STATES.remove(playerId);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∞—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –∏–≥—Ä–æ–∫–∞
     */
    public static ParryState getParryState(UUID playerId) {
        return PARRY_STATES.get(playerId);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–µ—Ç –ª–∏ –∏–≥—Ä–æ–∫ –∫–æ–Ω—Ç—Ä–∞—Ç–∞–∫–æ–≤–∞—Ç—å
     */
    public static boolean canCounterAttack(UUID playerId) {
        ParryState state = PARRY_STATES.get(playerId);
        return state != null && state.canCounterAttack;
    }
}
